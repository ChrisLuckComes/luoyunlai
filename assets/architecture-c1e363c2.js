import{j as e,d as i,e as l}from"./index-52cacda3.js";import{A as s}from"./Anchor-4d1d2fe9.js";const r="/luoyunlai/assets/levelArchitecture-68fd5d81.png",c="/luoyunlai/assets/dependency-e853bcb2.png",t="/luoyunlai/assets/moduleCommunication-9ea0abf2.png",n="/luoyunlai/assets/moduleCommunicationHorizon-c513c9a8.png",a="/luoyunlai/assets/dataFlow-9b704248.png",d="/luoyunlai/assets/micro-b8c42027.png",h="/luoyunlai/assets/plugin-511f7667.png";function j(){return e.jsxs("article",{id:"rootArticle",className:i.article,children:[e.jsxs("main",{className:i.content,children:[e.jsx("h2",{id:"architecture",className:"font-semibold text-h2 mb-2",children:"架构设计"}),e.jsx("p",{children:"以电商系统为例，介绍如何进行架构设计，从业务抽象到技术实现进行分层拆解。"}),e.jsx("br",{}),e.jsx("h2",{className:"font-semibold text-h2 mb-2",children:"核心思路"}),e.jsxs("ul",{className:i.ul,children:[e.jsxs("li",{children:[e.jsx("strong",{children:"分层解耦："}),"将系统拆分为独立职责层"]}),e.jsxs("li",{children:[e.jsx("strong",{children:"模块化设计："}),"按业务/功能划分可复用模块"]}),e.jsxs("li",{children:[e.jsx("strong",{children:"数据流管理："}),"明确数据流动方向与处理逻辑"]}),e.jsxs("li",{children:[e.jsx("strong",{children:"技术选型："}),"根据场景选择最合适的工具链"]}),e.jsxs("li",{children:[e.jsx("strong",{children:"拓展性设计："}),"预留未来功能拓展接口"]})]}),e.jsx("h2",{id:"levelArchitecture",className:i.articleTitle,children:"分层架构"}),"标准四层架构（表现层、业务层、数据层、基础设施层）是通用参考模型，但非强制要求",e.jsx("h3",{id:"responsibilitySeparation",className:i.articleSubTitle,children:"职责分离原则"}),"每层仅处理单一维度的职责，表现层专注UI渲染、业务层处理业务逻辑、数据层负责数据交互、通过垂直切分避免循环依赖。",e.jsx("br",{}),e.jsx("h3",{id:"dependency",className:i.articleSubTitle,children:"依赖关系"}),"上层只能依赖下层，下层不能反向依赖上层",e.jsx(l,{src:c}),e.jsx("br",{}),e.jsx("h3",{id:"separationOfConcerns",className:i.articleSubTitle,children:"关注点分离"}),"每层仅处理单一维度的职责，表现层专注UI渲染、业务层处理业务逻辑、数据层负责数据交互、通过垂直切分避免循环依赖。",e.jsx("br",{}),e.jsx("h3",{id:"levelAdjustment",className:i.articleSubTitle,children:"分层架构动态调整"}),"根据项目类型，按如下表格调整分层架构。",e.jsxs("table",{className:"border",children:[e.jsx("thead",{children:e.jsxs("tr",{children:[e.jsx("th",{className:"bg-gray border font-bold",children:"项目类型"}),e.jsx("th",{className:"border font-bold",children:"分层调整方式"}),e.jsx("th",{className:"border font-bold",children:"示例架构"})]})}),e.jsxs("tbody",{children:[e.jsxs("tr",{children:[e.jsx("td",{className:"px-10 border",children:"管理后台"}),e.jsx("td",{className:"px-10 border",children:"合并表现层与业务层"}),e.jsx("td",{className:"px-10 border",children:"视图层 -> 服务层 -> 数据层"})]}),e.jsxs("tr",{children:[e.jsx("td",{className:"px-10 border",children:"复杂中后台系统"}),e.jsx("td",{className:"px-10 border",children:"增加领域层 (DDD)"}),e.jsx("td",{className:"px-10 border",children:"表现层 -> 领域层 -> 基础设施层"})]}),e.jsxs("tr",{children:[e.jsx("td",{className:"px-10 border",children:"微前端架构"}),e.jsx("td",{className:"px-10 border",children:"引入容器层与微应用层"}),e.jsx("td",{className:"px-10 border",children:"容器层 -> 微应用层 -> 共享服务层"})]})]})]}),e.jsx("h2",{id:"moduleCommunication",className:i.articleTitle,children:"模块间通信机制"}),e.jsx("h3",{id:"vertical",className:i.articleSubTitle,children:"纵向通信"}),"通过约定的接口进行层间调用",e.jsx(l,{src:t}),e.jsx("h3",{id:"horizontal",className:i.articleSubTitle,children:"横向通信"}),"通过事件总线或者状态管理实现",e.jsx(l,{src:n}),e.jsx("h2",{id:"dataFlow",className:i.articleTitle,children:"数据流示例"}),e.jsx(l,{src:a}),e.jsx("h2",{id:"technologyStackSelection",className:i.articleTitle,children:"技术栈选择策略"}),e.jsxs("ul",{className:i.ul,children:[e.jsxs("li",{children:[e.jsx("strong",{children:"框架选型: "}),"Vue3/React(组件化支持)"]}),e.jsxs("li",{children:[e.jsx("strong",{children:"状态管理: "}),"Vuex/Pinia/Redux(复杂状态管理)"]}),e.jsxs("li",{children:[e.jsx("strong",{children:"构建工具: "}),"Vite/Webpack/Rspack(构建工具支持)"]}),e.jsxs("li",{children:[e.jsx("strong",{children:"样式方案: "}),"Sass/PostCSS/Tailwind(原子化设计)"]}),e.jsxs("li",{children:[e.jsx("strong",{children:"跨端方案: "}),"H5/Taro/Flutter/React Native(多端适配)"]})]}),e.jsx("h2",{id:"extensibilityDesignPoints",className:i.articleTitle,children:"拓展性设计要点"}),e.jsx("h3",{id:"micro",className:i.articleSubTitle,children:"微前端架构"}),e.jsx(l,{src:d}),e.jsx("h3",{id:"plugin",className:i.articleSubTitle,children:"插件化机制"}),e.jsx(l,{src:h}),e.jsx("h2",{id:"completeExample",className:i.articleTitle,children:"完整示例(电商平台架构)"}),e.jsx(l,{src:r}),e.jsx("h2",{id:"verificationChecklist",className:i.articleTitle,children:"验证清单"}),e.jsx("p",{children:"1.模块间是否高内聚低耦合?"}),e.jsx("p",{children:"2.数据流是否单向且可追溯?"}),e.jsx("p",{children:"3.关键路径响应时间是否达标?"}),e.jsx("p",{children:"4.是否具备容灾和降级方案?"}),e.jsx("p",{children:"5.技术栈是否符合团队能力?"}),e.jsx("p",{children:"6.是否预留监控埋点?"})]}),e.jsx(s,{items:[{title:"核心思路",key:"architecture",href:"#architecture",children:[]},{title:"分层架构",key:"levelArchitecture",href:"#levelArchitecture",children:[{title:"职责分离原则",key:"responsibilitySeparation",href:"#responsibilitySeparation",children:[]},{title:"依赖关系",key:"dependency",href:"#dependency",children:[]},{title:"关注点分离",key:"separationOfConcerns",href:"#separationOfConcerns",children:[]},{title:"分层架构动态调整",key:"levelAdjustment",href:"#levelAdjustment",children:[]}]},{title:"模块间通信机制",key:"moduleCommunication",href:"#moduleCommunication",children:[{title:"纵向通信",key:"vertical",href:"#vertical",children:[]},{title:"横向通信",key:"horizontal",href:"#horizontal",children:[]}]},{title:"数据流示例",key:"dataFlow",href:"#dataFlow",children:[]},{title:"技术栈选择策略",key:"technologyStackSelection",href:"#technologyStackSelection",children:[]},{title:"拓展性设计要点",key:"extensibilityDesignPoints",href:"#extensibilityDesignPoints",children:[{title:"微前端架构",key:"micro",href:"#micro",children:[]},{title:"插件化机制",key:"plugin",href:"#plugin",children:[]}]},{title:"完整示例",key:"completeExample",href:"#completeExample",children:[]},{title:"验证清单",key:"verificationChecklist",href:"#verificationChecklist",children:[]}]})]})}export{j as default};
