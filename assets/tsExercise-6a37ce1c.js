import{j as e,d as i}from"./index-aeb01ca2.js";import{U as s}from"./useMarkdown-e5ed2f76.js";import{T as t,I as f,P as m,R as y,a as u,b as k,F as p,L as b,A as N,C as w,M as A,c as S}from"./toggle-22225b39.js";import{A as O}from"./Anchor-8814bbd4.js";import"./index-5e35097d.js";function P(){const r=e.jsx(s,{markdown:f}),l=e.jsx(s,{markdown:m}),c=e.jsx(s,{markdown:y}),n=e.jsx(s,{markdown:u}),a=e.jsx(s,{markdown:k}),d=e.jsx(s,{markdown:p}),o=e.jsx(s,{markdown:b}),x=e.jsx(s,{markdown:N}),h=e.jsx(s,{markdown:w}),j=e.jsx(s,{markdown:A}),T=e.jsx(s,{markdown:S});return e.jsxs("article",{id:"rootArticle",className:i.article,children:[e.jsxs("main",{className:i.content,children:[e.jsx("h2",{id:"pre",className:"font-semibold text-h2 mb-2",children:"TypeScript类型体操"}),"TS想必都不陌生了，练练手吧，巩固基础。",e.jsx("h3",{id:"if",className:i.articleSubTitle,children:"If"}),"实现一个If类型，接收一个条件C，为真时返回类型T，判断为假是返回类型F。C只能是boolean,T和F是任意类型。",e.jsx(t,{content:r}),"ts中常规的条件判断一般都用",e.jsx("code",{children:"extends xxx"}),"，在泛型中可以收窄类型，并且支持三目运算符输出结果",e.jsx("h3",{id:"pick",className:i.articleSubTitle,children:"Pick"}),"实现TS内置Pick，Pick接收类型T，选择出属性K，构造新类型。",e.jsx(t,{content:l}),"需要使用",e.jsx("code",{children:"keyof T"}),"，表示类型K是T中的某一个Key",e.jsx("h3",{id:"if",className:i.articleSubTitle,children:"Readonly"}),"实现内置Readonly，接收一个泛型参数，返回一个所有属性被readonly修饰的类型。",e.jsx(t,{content:c}),"只需要在key前面加",e.jsx("code",{children:"readonly"}),"关键字就可以了",e.jsx("h3",{id:"tupleToObject",className:i.articleSubTitle,children:"TupleToObject"}),n,e.jsx(t,{content:a}),"遍历Object类型使用keyof，遍历元组类型使用",e.jsx("code",{children:"[number]"}),e.jsx("h3",{id:"firstOfArray",className:i.articleSubTitle,children:"First of Array"}),"实现一个类型，返回数组第一个值的类型：",e.jsx(t,{content:d}),"除了常规T[0]取值之外，也可以用",e.jsx("code",{children:"infer"}),"关键字。它可以推断某些类型，需要配合",e.jsx("code",{children:"extends"}),"使用。",e.jsx("h3",{id:"length",className:i.articleSubTitle,children:"Length Of Tuple"}),"创建通用Length，接收一个数组，返回数组长度",e.jsx(t,{content:o}),e.jsx("h3",{id:"awaited",className:i.articleSubTitle,children:"Awaited"}),"在 TS 中，我们用 Promise 中的 T 来描述这个 Promise 返回的类型。请你实现一个类型，可以获取这个类型",e.jsx(t,{content:x}),"此处使用",e.jsx("code",{children:"infer关键字即可"}),"，如果T满足条件，返回R即可，否则返回T，还需要处理嵌套Promise。",e.jsx("h3",{id:"concat",className:i.articleSubTitle,children:"Concat"}),"在类型系统里实现 JavaScript 内置的 Array.concat 方法，这个类型接受两个参数，返回的新数组类型应该按照输入参数从左到右的顺序合并为一个新的数组。",e.jsx(t,{content:h}),"ts也支持...展开运算符",e.jsx("h3",{id:"exclude",className:i.articleSubTitle,children:"Exclude"}),"实现内置的Exclude <T, U>类型，但不能直接使用它本身。从联合类型T中排除U的类型成员，来构造一个新的类型。",e.jsx(t,{content:j}),e.jsx("h3",{id:"include",className:i.articleSubTitle,children:"Include"}),"在类型系统里实现 JavaScript 的 Array.includes 方法，这个类型接受两个参数，返回的类型要么是 true 要么是 false。",e.jsx(t,{content:T}),"如果不考虑子类型实现比较简单，要考虑的话需要递归去判断，并且要借助其他类型判断是否===",e.jsx("h2",{id:"know",className:i.articleTitle,children:"知识"}),e.jsx("h3",{id:"type",className:i.articleSubTitle,children:"判断类型是否一致"}),"通常使用",e.jsx("code",{children:"extends"}),"关键字完成",e.jsx("br",{}),"如果要判断全等，则需要使用Includes中的",e.jsx("code",{children:"Equal"}),"联合类型。",e.jsx("h3",{id:"infer",className:i.articleSubTitle,children:"推断类型"}),"推断类型需要使用",e.jsx("code",{children:"infer"}),"关键字，infer关键字和extends关键字配合收窄类型之后使用。",e.jsx("br",{}),"例如",e.jsx("code",{children:"[infer F,...inter R]"}),"F是第一个元素的类型，R为剩余的元素类型。",e.jsx("h3",{id:"traverse",className:i.articleSubTitle,children:"遍历"}),e.jsxs("ul",{className:i.ul,children:[e.jsxs("li",{children:[e.jsx("span",{children:"联合类型遍历"}),e.jsx("br",{}),e.jsx("code",{children:"type Test<T> = T extends string ? string : never"})]}),e.jsxs("li",{children:[e.jsx("span",{children:"对象的key遍历"}),e.jsx("br",{}),e.jsxs("code",{children:["type Test<T> = ","[K in keyof T]: T[K]"]}),e.jsx("div",{children:"不想要的key可以返回never"})]}),e.jsxs("li",{children:[e.jsx("span",{children:"数组的遍历"}),e.jsx("br",{}),e.jsxs("code",{children:["type Test<T> = ","[K in keyof T]: T[K]"]}),e.jsx("br",{}),e.jsxs("code",{children:["type Test<T> = ","[K in T[number]]: K"]})]})]})]}),e.jsx(O,{items:[{title:"TypeScript类型体操",key:"pre",href:"#pre"},{title:"If",key:"if",href:"#if"},{title:"Pick",key:"pick",href:"#pick"},{title:"Readonly",key:"readonly",href:"#readonly"},{title:"TupleToObject",key:"tupleToObject",href:"#tupleToObject"},{title:"First of Array",key:"firstOfArray",href:"#firstOfArray"},{title:"Length Of Tuple",key:"length",href:"#length"},{title:"Awaited",key:"awaited",href:"#awaited"},{title:"Concat",key:"concat",href:"#concat"},{title:"Exclude",key:"exclude",href:"#exclude"},{title:"Include",key:"include",href:"#include"},{title:"知识",key:"know",href:"#know",children:[{title:"判断类型是否一致",key:"type",href:"#type"},{title:"推断类型",key:"infer",href:"#infer"},{title:"遍历",key:"traverse",href:"#traverse"}]}]})]})}export{P as default};
